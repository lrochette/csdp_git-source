# This Workflow Template is used to create your first CI pipeline in CSDP
# This CI pipeline builds a docker image using Kaniko, uploads image metadata to CSDP, and tests the image
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: ci-simple-demo1
spec:
#   arguments:
    # List here all the arguments to pass as variables to the Workflow from the Sensor
    # Use this syntax to pass them into the Workflow Templates: "{{workflow.parameters.REPO}}"
    # These are the arguments that are required for this CI pipeline:
    # parameters:
    #   - name: REPO
    #   - name: IMAGE_NAME
    #   - name: TAG
    #   - name: GIT_REVISION
    #   - name: GIT_BRANCH
    #   - name: GIT_COMMIT_URL
    #   - name: GIT_COMMIT_MESSAGE


  # To use the build-docker-image step from the argo-hub.kaniko.0.0.1 template, you need to create a docker-registry secret
  # Use your docker credentials for the runtime namespace
  # https://jamesdefabia.github.io/docs/user-guide/kubectl/kubectl_create_secret_docker-registry/
  volumes:
    - name: docker-config
      secret:
        items:
        - key: .dockerconfigjson
          path: config.json
        secretName: docker-registry # this is the name of the docker-registry secret you created
  entrypoint: ci-steps
  templates:
  # Test template
    - name: test
      inputs:
        parameters:
        - name: IMAGE
      container:
        image: '{{ inputs.parameters.IMAGE }}'
        command: [sh, -c]
        args: ["ls"]

    - name: ci-steps
      inputs:
        parameters:
          - name: REPO
          - name: IMAGE_NAME
          - name: TAG
          - name: GIT_REVISION
            default: 'master'         # use default value if this parameter is not provided
          - name: GIT_BRANCH
          - name: GIT_COMMIT_URL
            default: ''
          - name: GIT_COMMIT_MESSAGE
            default: 'commit some test'
      steps:
        # https://github.com/codefresh-io/argo-hub/blob/main/workflows/kaniko/versions/0.0.1/docs/build.md
        # https://codefresh.io/argo/hub/workflow-template/kaniko
        - - name: build-docker-image
            arguments:
              parameters:
                - name: REPO
                  value: '{{ inputs.parameters.REPO }}'
                - name: REVISION
                  value: master
                - name: IMAGE_NAME
                  value: '{{ inputs.parameters.IMAGE_NAME }}'
                  # Create git secret token and apply it to your cluster under the runtime namespace
                  # NOTE: The token should be in base64 format
                  # https://kubernetes.io/docs/concepts/configuration/secret/
                  # Create github.secret.yaml with the following content:
                  #   apiVersion: v1
                  #   kind: Secret
                  #   metadata:
                  #     name: github-token
                  #   type: Opaque
                  #   data:
                  #     token: <github token base64 here>
                  # Run kubectl -n <namespace> apply -f github.secret.yaml
                - name: GIT_TOKEN_SECRET
                  value: github-token # the name of the git secret token you applied to your cluster
                - name: DOCKERFILE
                  value: Dockerfile # you can specify actual value or to use the template inputs - for more info https://argoproj.github.io/argo-workflows/variables/
                - name: CONTEXT
                  value: .
                - name: TAG
                  value: '{{ inputs.parameters.TAG }}'
            templateRef:
              name: argo-hub.kaniko.0.0.1
              template: build

        #  https://github.com/codefresh-io/argo-hub/blob/main/workflows/codefresh-csdp/versions/0.0.6/docs/report-image-info.md
        #  https://codefresh.io/argo/hub/workflow-template/codefresh-csdp
        - - name: report-image-info
            arguments:
              parameters:
                - name: IMAGE
                  value: '{{ inputs.parameters.IMAGE_NAME }}:{{ inputs.parameters.TAG }}'
                - name: CF_API_KEY
                  value: codefresh-token # this secret is created as part of the runtime installation
                - name: GIT_REVISION
                  value: '{{ inputs.parameters.GIT_REVISION }}'
                - name: GIT_BRANCH
                  value: '{{ inputs.parameters.GIT_BRANCH }}'
                - name: GIT_COMMIT_URL
                  value: '{{ inputs.parameters.GIT_COMMIT_URL }}'
                - name: GIT_COMMIT_MESSAGE
                  value: '{{ inputs.parameters.GIT_COMMIT_MESSAGE }}'
                  # Create registry-creds secret and apply it to your cluster under the runtime namespace
                  # You can use also use other creds such gcr/aws; please look at the template inputs for more info  https://github.com/codefresh-io/argo-hub/blob/main/workflows/codefresh-csdp/versions/0.0.6/docs/report-image-info.md
                  # Note that the token uses base64
                  # https://kubernetes.io/docs/concepts/configuration/secret/
                  # Create registry-creds.yaml with the following content:
                  #   apiVersion: v1
                  #   kind: Secret
                  #   metadata:
                  #     name: registry-creds
                  #   type: Opaque
                  #   data:
                  #     username: <REGISTRY_USERNAME base64 here>
                  #     password: <REGISTRY_PASSWORD base64 here>
                  #     domain: <REGISTRY_DOMAIN base64 here>
                  # Run kubectl -n <namespace> apply -f <registry-creds name>.yaml
                - name: USERNAME
                  value: dockerquay-creds  # the name of the registry-creds secret you created
                - name: PASSWORD
                  value: dockerquay-creds
                - name: DOMAIN
                  value: dockerquay-creds
            templateRef:
              name: argo-hub.codefresh-csdp.0.0.6
              template: report-image-info

        - - name: test-image
            arguments:
              parameters:
              - name: IMAGE
                value: '{{ inputs.parameters.IMAGE_NAME }}:{{ inputs.parameters.TAG }}'
            template: test