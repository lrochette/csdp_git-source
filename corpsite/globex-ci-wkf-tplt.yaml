# This Workflow Template is used to create your first CI pipeline in CSDP
# This CI pipeline builds a docker image using Kaniko, uploads image metadata to CSDP, and tests the image

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: globex-ci
spec:
  arguments:
    # List here all the arguments to pass as variables to the Workflow from the Sensor
    # Use this syntax to pass them into the Workflow Templates: "{{workflow.parameters.REPO}}"
    # These are the arguments that are required for this CI pipeline:
    parameters:
      - name: REPO
        default: https://github.com/lrochette/CorpSite
      - name: BRANCH
        default: master
      - name: GIT_COMMIT_URL
      - name: GIT_COMMIT_MESSAGE
      - name: CREATE_CR
        default: false
  entrypoint: ci-pipeline
  templates:
    - name: ci-pipeline
      inputs:
        parameters:
          - name: REPO
            value: https://github.com/lrochette/CorpSite
          - name: BRANCH
          - name: GIT_COMMIT_URL
            value: ''
          - name: GIT_COMMIT_MESSAGE
            value: ''
        #   - name: CREATE_CR
        #     value: false

      dag:
        tasks:

        - name: clone
          templateRef:
            name: argo-hub.git.0.0.3
            template: clone
          arguments:
            parameters:
            - name: REPO_URL
              value: "{{inputs.parameters.REPO}}"
            - name: REVISION
              value: "{{inputs.parameters.BRANCH}}"
            - name: GIT_TOKEN_SECRET
              value: github-token
          outputs:
            - artifacts:
              - name: repo
                path: /tmp/CorpSite
        # - name: wait
        #   depends: clone
        #   template: approve

        - name: clone-config
          # depends: wait
          templateRef:
            name: argo-hub.git.0.0.3
            template: clone
          arguments:
            parameters:
            - name: REPO_URL
              value: "https://github.com/lrochette/csdp_applications.git"
            - name: REVISION
              value: "main"
            - name: GIT_TOKEN_SECRET
              value: github-token
          outputs:
            - artifacts:
              - name: repo
                path: /tmp/CorpSite_gitops

        - name: ls1
          template: listing
          depends: clone
          arguments:
            artifacts:
              - name: lsdir
                from: '{{ tasks.clone.outputs.artifacts.repo }}'

        # - name: ls1
        #   depends: clone
        #   inline:
        #       artifacts:
        #         - name: lsdir
        #           path: /tmp/lsdir
        #           from: '{{ tasks.clone.outputs.artifacts.repo }}'
        #     container:
        #       image: alpine:3.7
        #       command: [ sh ]
        #       source : |
        #         ls -ail  /tmp/lsdir

        - name: ls2
          template: listing
          depends: clone-config
          arguments:
            artifacts:
              - name: lsdir
                from: '{{ tasks.clone-config.outputs.artifacts.repo }}'
            parameters:
              - name: RESOURCES_LIMITS_MEMORY
                value: "512M"
              - name: RESOURCES_REQUESTS_CPU
                value: "400m"

        - name: maven-build
          template: maven
          arguments:
            parameters:
            - name: target
              value: "package"
            artifacts:
              - name: builddir
                from: '{{ tasks.clone.outputs.artifacts.repo }}'
          outputs:
            - artifacts:
              - name: builddir
                path: /tmp/build
          depends: clone

        - name: add-jira-comment
          depends: maven-build.Succeeded
          templateRef:
            name: argo-hub.jira.0.0.1
            template: create-comment
          arguments:
            parameters:
            - name: COMMENT_BODY
              value: "Build {{ workflow.uid}} was successfull started"
            -   name: JIRA_API_KEY
                value: jira-token
            -   name: JIRA_API_KEY_SECRET_KEY
                value: token
            -   name: JIRA_BASE_URL
                value: https://codefresh-io.atlassian.net
            -   name: JIRA_USERNAME
                value: jira-token
            -   name: JIRA_USERNAME_SECRET_KEY
                value: 'email'
            -   name: JIRA_ISSUE_SOURCE_FIELD
                value: FT-50

        # - name: slack-message
        #   depends: maven-build
        #   templateRef:
        #     name: argo-hub.slack.0.0.2
        #     template: post-to-channel
        #   arguments:
        #     parameters:
        #     - name: SLACK_CHANNEL
        #       value: "laurent.rochette@codefresh.io"
        #     - name: SLACK_MESSAGE
        #       value: "Maven build successful for {{workflow.uid}}\nRepo: {{inputs.parameters.REPO}}\nRevision: {{inputs.parameters.BRANCH}}"
        #     - name: SLACK_TOKEN
        #       value: slack-token
        #     - name: LOG_LEVEL
        #       value: "debug"

        - name: maven-test
          template: maven
          arguments:
            parameters:
            - name: target
              value: "test"
            artifacts:
              - name: builddir
                from: '{{ tasks.maven-build.outputs.artifacts.builddir }}'
          outputs:
            - artifacts:
              - name: builddir
                path: /tmp/build
          depends: maven-build

        - name: build-image
          template: kaniko-build
          arguments:
            artifacts:
              - name: contextdir
                from: '{{ tasks.maven-build.outputs.artifacts.builddir }}'
            parameters:
            - name: image
              value: "lrochette/globex"
            - name: tag
              value: "{{ tasks.get-version.outputs.parameters.VERSION }}"
          depends: get-version

        - name: report-image-info
          depends: build-image
          templateRef:
            name: argo-hub.codefresh-csdp.1.1.1
            template: report-image-info
          arguments:
            parameters:
              - name: IMAGE_NAME
                value: 'docker.io/lrochette/globex:{{ tasks.get-version.outputs.parameters.VERSION }}'
              - name: WORKFLOW_NAME
                value: globex-ci
              - name: WORKFLOW_URL
                value: "https://g.codefresh.io/2.0/workflows/{{ workflow.name}}"
                #value: "https://g.codefresh.io/2.0/workflows/corpsite-ci-xwqch"
              - name: CF_API_KEY
                value: codefresh-token # this secret is created as part of the runtime installation
              - name: DOCKERHUB_USERNAME
                value: dockerhub-creds
              - name: DOCKERHUB_PASSWORD
                value: dockerhub-creds

        - name: enrich-git
          depends: report-image-info
          templateRef:
            name: argo-hub.codefresh-csdp.1.1.1
            template: image-enricher-git-info
          arguments:
            parameters:
              - name: IMAGE_NAME
                value: '{{ tasks.report-image-info.outputs.parameters.image-name}}'
              - name: IMAGE_SHA
                value: '{{ tasks.report-image-info.outputs.parameters.image-sha }}'
              - name: GIT_PROVIDER
                value: github
              - name: CF_API_KEY
                value: codefresh-token # this secret is created as part of the runtime installation
              - name: REPO
                value: lrochette/CorpSite
              - name: BRANCH
                value: '{{ inputs.parameters.BRANCH }}'
              - name: GITHUB_TOKEN_SECRET_NAME
                value: github-token

        - name: enrich-image-jira
          depends: report-image-info
          templateRef:
            name: argo-hub.codefresh-csdp.1.1.1
            template: image-enricher-jira-info
          arguments:
            parameters:
            - name: IMAGE_NAME
              value: 'docker.io/lrochette/globex:{{ tasks.get-version.outputs.parameters.VERSION }}'
            - name: CF_API_KEY
              value: "codefresh-v1-token"
            - name: JIRA_PROJECT_PREFIX
              value: 'FT'
            - name: JIRA_MESSAGE
              value: '{{ inputs.parameters.GIT_COMMIT_MESSAGE}}'
            - name: JIRA_HOST_URL
              value: 'https://codefresh-io.atlassian.net'
            - name: JIRA_API_TOKEN_SECRET
              value: 'jira-token'

        - name: get-version
          depends: maven-build
          template: get-version
          arguments:
            artifacts:
              - name: repo
                from: '{{ tasks.clone.outputs.artifacts.repo }}'

        - name: update-manifest
          depends: "get-version && clone-config"
          templateRef:
            name: lr.generic
            template: freestyle-with-artifact
          arguments:
            artifacts:
              - name: dir
                from: '{{ tasks.clone-config.outputs.artifacts.repo }}'
            parameters:
              - name: image
                value: "mikefarah/yq:3.3.4"
              - name: commands
                value: |
                  yq w -i globex/overlays/dev/deployment.yaml 'spec.template.spec.containers[0].image' "lrochette/globex:{{tasks.get-version.outputs.parameters.VERSION}}"

        - name: commit-config-change
          depends: update-manifest
          templateRef:
            name: argo-hub.git.0.0.3
            template: commit
          arguments:
            artifacts:
              - name: repo
                from: "{{tasks.update-manifest.outputs.artifacts.dir}}"
            parameters:
              - name: GIT_USER_NAME
                value: "lrochette"
              - name: GIT_USER_EMAIL
                value: "laurent.rochette@codefresh.io"
              - name: MESSAGE
                value: "Committing new version for globex for lrochette/csdp_applications built in {{ workflow.name }}"

        - name: create-sn-cr
          depends: clone
          templateRef:
            name: argo-hub.servicenow.1.0.0
            template: createcr
          when: " {{workflow.parameters.CREATE_CR}} == true "
          arguments:
            parameters:
            - name: SN_INSTANCE
              value: "https://dev110939.service-now.com"
            - name: SN_AUTH
              value: "sn-auth"
            - name: LOGLEVEL
              value: "info"
            - name: CR_DATA
              value: >-
                {"short_description": "Globex deployment to QA environment",
                "description": "Change for build {{workflow.uid}}.\nThis change was created by the Codefresh GitOps CI plugin",
                "justification": "My app is awesome! Please deplopy ASAP",
                "cmdb_ci":"tomcat"
                }

        - name: update-sn-cr
          depends: "get-version && create-sn-cr"
          templateRef:
            name: argo-hub.servicenow.1.0.0
            template: updatecr
          when: " {{workflow.parameters.CREATE_CR}} == true "
          arguments:
            parameters:
            - name: SN_INSTANCE
              value: "https://dev110939.service-now.com"
            - name: SN_AUTH
              value: "sn-auth"
            - name: LOGLEVEL
              value: "info"
            - name: CR_DATA
              value: '{"work_notes":"Image build with tag {{tasks.get-version.outputs.parameters.VERSION}}"}'
            - name: CR_SYSID
              value: '{{ tasks.create-sn-cr.outputs.parameters.CR_SYSID}}'

        - name: update-sn-cr-with-config-commit
          depends: "commit-config-change && create-sn-cr"
          templateRef:
            name: argo-hub.servicenow.1.0.0
            template: updatecr
          when: " {{workflow.parameters.CREATE_CR}} == true "
          arguments:
            parameters:
            - name: SN_INSTANCE
              value: "https://dev110939.service-now.com"
            - name: SN_AUTH
              value: "sn-auth"
            - name: LOGLEVEL
              value: "info"
            - name: CR_DATA
              value: '{"work_notes":"Deployment commit {{ tasks.commit-config-change.outputs.parameters.COMMIT_SHA}}"}'
            - name: CR_SYSID
              value: '{{ tasks.create-sn-cr.outputs.parameters.CR_SYSID}}'
        # - name: approve
        #   depends: update-sn-cr-with-config-commit
        #   template: approve
        # - name: close-sn-cr
        #   depends: approve
        #   templateRef:
        #     name: argo-hub.servicenow.1.0.0
        #     template: closecr
        #   arguments:
        #     parameters:
        #     - name: SN_INSTANCE
        #       value: "https://dev110939.service-now.com"
        #     - name: SN_AUTH
        #       value: "sn-auth"
        #     - name: LOGLEVEL
        #       value: "debug"
        #     - name: CR_SYSID
        #       value: '{{ tasks.create-sn-cr.outputs.parameters.CR_SYSID}}'
        #     - name: CR_CLOSE_CODE
        #       value: "successful"
        #     - name: CR_CLOSE_NOTES
        #       value: "Closed automatically by Argo-Hub ServiceNow workflow template"

    # # Additional templates
    # - name: approve
    #   suspend: {}
    #
    - name: listing
      inputs:
        artifacts:
          - name: lsdir
            path: /tmp/lsdir
          ## Resource specification parameters
        parameters:
          - name: RESOURCES_LIMITS_CPU
            value: "1000m"
          - name: RESOURCES_LIMITS_MEMORY
            value: "1024M"
          - name: RESOURCES_REQUESTS_CPU
            value: "100m"
          - name: RESOURCES_REQUESTS_MEMORY
            value: "50M"
      podSpecPatch: |
        containers:
          - name: main
            resources:
              limits:
                {{=sprig.ternary( '', 'cpu: '    + inputs.parameters.RESOURCES_LIMITS_CPU,      sprig.empty(inputs.parameters.RESOURCES_LIMITS_CPU)      )}}
                {{=sprig.ternary( '', 'memory: ' + inputs.parameters.RESOURCES_LIMITS_MEMORY,   sprig.empty(inputs.parameters.RESOURCES_LIMITS_MEMORY)   )}}
              requests:
                {{=sprig.ternary( '', 'cpu: '    + inputs.parameters.RESOURCES_REQUESTS_CPU,    sprig.empty(inputs.parameters.RESOURCES_REQUESTS_CPU)    )}}
                {{=sprig.ternary( '', 'memory: ' + inputs.parameters.RESOURCES_REQUESTS_MEMORY, sprig.empty(inputs.parameters.RESOURCES_REQUESTS_MEMORY) )}}

      script:
        image: alpine:3.7
        workingDir: /tmp/lsdir
        command: [ sh ]
        source : |
         cat /sys/fs/cgroup/cpu/cpu.cfs_quota_us || true
         ls -ail
         echo "{{=sprig.ternary('DEFAULT RESOURCES_LIMITS_CPU ', 'cpu: '         + inputs.parameters.RESOURCES_LIMITS_CPU ,     sprig.empty(inputs.parameters.RESOURCES_LIMITS_CPU ) )}} \n"
         echo "{{=sprig.ternary('DEFAULT RESOURCES_LIMITS_MEMORY ', 'memory: '   + inputs.parameters.RESOURCES_LIMITS_MEMORY,   sprig.empty(inputs.parameters.RESOURCES_LIMITS_MEMORY ) )}} \n"
         echo "{{=sprig.ternary('DEFAULT RESOURCES_REQUESTS_CPU', 'cpu: '        + inputs.parameters.RESOURCES_REQUESTS_CPU,    sprig.empty(inputs.parameters.RESOURCES_REQUESTS_CPU) )}} \n"
         echo "{{=sprig.ternary('DEFAULT RESOURCES_REQUESTS_MEMORY', 'memory: '  + inputs.parameters.RESOURCES_REQUESTS_MEMORY, sprig.empty(inputs.parameters.RESOURCES_REQUESTS_MEMORY) )}} \n"

    - name: maven
      inputs:
        artifacts:
          - name: builddir
            path: /tmp/build
        parameters:
        - name: target
      script:
        image: maven:3.3-jdk-8
        workingDir: /tmp/build
        command: [ bash ]
        source: |
          mvn -Dmaven.repo.local=/tmp/m2_repository {{inputs.parameters.target}}
      outputs:
        artifacts:
          - name: builddir
            path: /tmp/build

    - name: get-version
      inputs:
        artifacts:
          - name: repo
            path: /tmp/repo
      outputs:
        parameters:
          - name: VERSION
            valueFrom:
              path: /tmp/repo/version.txt
      script:
        image: alpine:3.7

        workingDir: /tmp/repo
        command: [ sh ]
        source: |
          cat version.txt

    - name: kaniko-build
      inputs:
        parameters:
          - name: image
          - name: tag
        artifacts:
          - name: contextdir
            path: /tmp/build
      volumes:
        - name: docker-config
          secret:
            items:
            - key: .dockerconfigjson
              path: config.json
            secretName: dockerhub-config
      container:
        image: gcr.io/kaniko-project/executor:v1.6.0
        # workingDir: /codefresh/volume/CorpSite
        volumeMounts:
          - name: docker-config
            mountPath: /kaniko/.docker
        command:
          - /kaniko/executor
        args:
          - "--dockerfile=Dockerfile"
          - "--context=dir:///tmp/build"
          - "--destination={{inputs.parameters.image}}:{{inputs.parameters.tag}}"
          - "--destination={{inputs.parameters.image}}:latest"
          - "--image-name-with-digest-file=/tmp/build/image_name_digest.txt"
          - "--image-name-tag-with-digest-file=/tmp/build/image_name_tag.txt"
        env:
          - name: DOCKER_CONFIG
            value: /kaniko/.docker
