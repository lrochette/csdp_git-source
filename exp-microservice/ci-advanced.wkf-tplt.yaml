# This Workflow Template is used to create your first CI pipeline in CSDP
# This CI pipeline builds a docker image using Kaniko, uploads image metadata to CSDP, and tests the image
# https://codefresh.io/csdp-docs/docs/getting-started/quick-start/create-ci-pipeline/
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: ci-advanced
spec:
  volumes:
    - name: docker-config
      secret:
        items:
          - key: .dockerconfigjson
            path: config.json
        secretName: '{{ inputs.parameters.DOCKER_CONFIG_SECRET }}'
  entrypoint: ci-tasks
  templates:
    - name: ci-tasks
      inputs:
        parameters:
          - name: GIT_REPO_URL
          - name: IMAGE_NAME
          - name: IMAGE_TAG
            default: latest
          - name: GIT_AUTHOR
            default: ''
          - name: GIT_REVISION
            default: main         # use default value if this parameter is not provided
          - name: GIT_BRANCH
            default: main
          - name: GIT_COMMIT_URL
            default: ''
          - name: GIT_COMMIT_MESSAGE
            default: ''
          - name: DOCKERFILE
            default: Dockerfile
          # Create git secret token and apply it to your cluster under the runtime namespace
          #   kubectl create secret generic github-token           #   --from-literal=token=$GIT_TOKEN --dry-run=client           #   --save-config -o yaml | kubectl apply -f - -n $NAMESPACE
          - name: GIT_TOKEN_SECRET
            default: github-token # the name of the git secret token you applied to your cluster
          - name: CONTEXT
            default: .
          # Create registry-creds secret and apply it to your cluster under the runtime namespace
          # You can use also use other creds such gcr/aws; please look at the template inputs for more info: https://github.com/codefresh-io/argo-hub/blob/main/workflows/codefresh-csdp/versions/0.0.6/docs/report-image-info.md
          # kubectl create secret generic registry-creds           # --from-literal=username=$USER           # --from-literal=password=$PASSWORD           # --from-literal=domain=$DOMAIN           # --dry-run=client --save-config -o yaml | kubectl apply -f - -n $NAMESPACE
          - name: REGISTRY_CREDS_SECRET
            default: registry-creds  # the name of the registry-creds secret you created
          # Create a docker-registry secret with your docker credentials and apply it to your cluster under the runtime namespace
          # https://jamesdefabia.github.io/docs/user-guide/kubectl/kubectl_create_secret_docker-registry/
          - name: DOCKER_CONFIG_SECRET
            default: docker-config  # the name of the registry-creds secret you created
          - name: PROMOTE_TO
            default: 'nil'
          - name: APP_PATH_PREFIX
            default: 'kustomize/express/overlays'
          - name: CF_API_KEY
            default: codefresh-token
          - name: CF_V1_TOKEN
            default: codefresh-v1-token
          - name: JIRA_PROJECT_PREFIX
            default: 'KPT'
          - name: JIRA_HOST
            default: 'cf-demo-jira.atlassian.net'
          - name: JIRA_API_TOKEN_SECRET
            default: 'jira-creds'
          - name: REPO_SLUG
      dag:
        tasks:

        # BUILD
        # ========================================================
          # https://codefresh.io/argohub/workflow-template/kaniko
          # Build the quay image
          - name: build-docker-image-quay
            templateRef:
              name: argo-hub.kaniko.0.0.1
              template: build
            arguments:
              parameters:
                - name: REPO
                  value: '{{ inputs.parameters.GIT_REPO_URL }}'
                - name: REVISION
                  value: '{{ inputs.parameters.GIT_REVISION }}'
                - name: IMAGE_NAME
                  value: '{{ inputs.parameters.IMAGE_NAME }}'
                - name: GIT_TOKEN_SECRET
                  value: '{{ inputs.parameters.GIT_TOKEN_SECRET }}'
                - name: DOCKERFILE
                  value: '{{ inputs.parameters.DOCKERFILE }}'
                - name: CONTEXT
                  value: '{{ inputs.parameters.CONTEXT }}'
                - name: TAG
                  value: '{{ inputs.parameters.IMAGE_TAG }}'

          # Build the dockerhub image
          - name: build-docker-image-dockerhub
            templateRef:
              name: staging.kaniko.0.0.1
              template: build
            arguments:
              parameters:
                - name: REPO
                  value: '{{ inputs.parameters.GIT_REPO_URL }}'
                - name: REVISION
                  value: '{{ inputs.parameters.GIT_REVISION }}'
                - name: IMAGE_NAME
                  value:  >-
                    salesdemosa/{{=
                      sprig.split("/", inputs.parameters.IMAGE_NAME)._2
                    }}
                  # value: 'salesdemosa/express-microservice'
                - name: DOCKER_CONFIG_SECRET
                  value: 'dockerhub-regcreds'
                - name: GIT_TOKEN_SECRET
                  value: '{{ inputs.parameters.GIT_TOKEN_SECRET }}'
                - name: DOCKERFILE
                  value: '{{ inputs.parameters.DOCKERFILE }}'
                - name: CONTEXT
                  value: '{{ inputs.parameters.CONTEXT }}'
                - name: TAG
                  value: '{{ inputs.parameters.IMAGE_TAG }}'
        # --------------------------------------------------------
        # REPORT
        # ========================================================
          # Report the quay image to codefresh and enrich it with jira & PR info
          - name: report-and-enrich-image-quay
            templateRef:
              name: report-and-enrich-image
              template: report-and-enrich-image
            arguments:
              parameters:
                - name: DOCKER_IMAGE
                  value: '{{ inputs.parameters.IMAGE_NAME }}:{{ inputs.parameters.IMAGE_TAG }}'
                - name: REGISTRY_PROVIDER
                  value: 'quay'
                - name: REGISTRY_CREDS_SECRET
                  value: '{{ inputs.parameters.REGISTRY_CREDS_SECRET }}'

                - name: CF_API_KEY
                  value: '{{ inputs.parameters.CF_API_KEY }}' # this secret is created as part of the runtime installation
                - name: CF_V1_TOKEN
                  value: '{{ inputs.parameters.CF_V1_TOKEN }}'

                - name: GIT_AUTHOR
                  value: '{{ inputs.parameters.GIT_AUTHOR }}'
                - name: GIT_REVISION
                  value: '{{ inputs.parameters.GIT_REVISION }}'
                - name: GIT_BRANCH
                  value: '{{ inputs.parameters.GIT_BRANCH }}'
                - name: GIT_COMMIT_URL
                  value: '{{ inputs.parameters.GIT_COMMIT_URL }}'
                - name: GIT_COMMIT_MESSAGE
                  value: '{{ inputs.parameters.GIT_COMMIT_MESSAGE }}'
                - name: GIT_TOKEN_SECRET
                  value: '{{ inputs.parameters.GIT_TOKEN_SECRET }}'

                - name: JIRA_PROJECT_PREFIX
                  value: '{{ inputs.parameters.JIRA_PROJECT_PREFIX }}'
                - name: JIRA_HOST
                  value: '{{ inputs.parameters.JIRA_HOST }}'
                - name: JIRA_API_TOKEN_SECRET
                  value: '{{ inputs.parameters.JIRA_API_TOKEN_SECRET }}'
                - name: REPO_SLUG
                  value: '{{ inputs.parameters.REPO_SLUG }}'

                # Link back to the workflow
                - name: WORKFLOW_NAME
                  value: '{{ workflow.name }}'
            depends: build-docker-image-quay

          # Report the dockerhub image to codefresh and enrich it with jira & PR info
          - name: report-and-enrich-image-dockerhub
            templateRef:
              name: report-and-enrich-image
              template: report-and-enrich-image
            arguments:
              parameters:
                - name: DOCKER_IMAGE
                  value:  >-
                    salesdemosa/{{=
                      sprig.split("/", inputs.parameters.IMAGE_NAME)._2
                    }}:{{ inputs.parameters.IMAGE_TAG }}
                  #value: 'salesdemosa/express-microservice:{{ inputs.parameters.IMAGE_TAG }}'
                - name: REGISTRY_PROVIDER
                  value: 'dockerhub'
                - name: REGISTRY_CREDS_SECRET
                  value: 'dockerhub-creds'

                - name: CF_API_KEY
                  value: '{{ inputs.parameters.CF_API_KEY }}' # this secret is created as part of the runtime installation
                - name: CF_V1_TOKEN
                  value: '{{ inputs.parameters.CF_V1_TOKEN }}'

                - name: GIT_AUTHOR
                  value: '{{ inputs.parameters.GIT_AUTHOR }}'
                - name: GIT_REVISION
                  value: '{{ inputs.parameters.GIT_REVISION }}'
                - name: GIT_BRANCH
                  value: '{{ inputs.parameters.GIT_BRANCH }}'
                - name: GIT_COMMIT_URL
                  value: '{{ inputs.parameters.GIT_COMMIT_URL }}'
                - name: GIT_COMMIT_MESSAGE
                  value: '{{ inputs.parameters.GIT_COMMIT_MESSAGE }}'
                - name: GIT_TOKEN_SECRET
                  value: '{{ inputs.parameters.GIT_TOKEN_SECRET }}'

                - name: JIRA_PROJECT_PREFIX
                  value: '{{ inputs.parameters.JIRA_PROJECT_PREFIX }}'
                - name: JIRA_HOST
                  value: '{{ inputs.parameters.JIRA_HOST }}'
                - name: JIRA_API_TOKEN_SECRET
                  value: '{{ inputs.parameters.JIRA_API_TOKEN_SECRET }}'
                - name: REPO_SLUG
                  value: '{{ inputs.parameters.REPO_SLUG }}'

                # Link back to the workflow
                - name: WORKFLOW_NAME
                  value: '{{ workflow.name }}'
            depends: build-docker-image-dockerhub

        # --------------------------------------------------------
        # TEST
        # ========================================================
          - name: test-image
            template: test
            arguments:
              parameters:
                - name: IMAGE
                  value: '{{ inputs.parameters.IMAGE_NAME }}:{{ inputs.parameters.IMAGE_TAG }}'
            depends: report-and-enrich-image-quay

        # --------------------------------------------------------
        # PROMOTE
        # ========================================================
          - name: promoteImage
            templateRef:
              name: kustomize-promote-image
              template: kustomize-promote-image
            arguments:
              parameters:
                - name: IMAGE
                  value: '{{ inputs.parameters.IMAGE_NAME }}:{{ inputs.parameters.IMAGE_TAG }}'
                - name: PROMOTE_TO
                  value: '{{ inputs.parameters.PROMOTE_TO }}'
                - name: APP_PATH_PREFIX
                  value: '{{ inputs.parameters.APP_PATH_PREFIX }}'
            depends: test-image
            when: "{{ inputs.parameters.PROMOTE_TO }} != 'nil'"
    # Test template
    - name: test
      serviceAccountName: argo-hub.ci-simple.0.0.1
      inputs:
        parameters:
          - name: IMAGE
      container:
        image: '{{ inputs.parameters.IMAGE }}'
        command: [sh, -c]
        args: ["ls"]
